/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_snake_case, non_upper_case_globals)]

pub const kOfxActionLoad: &[u8; 14] = b"OfxActionLoad\0";
pub const kOfxActionDescribe: &[u8; 18] = b"OfxActionDescribe\0";
pub const kOfxActionUnload: &[u8; 16] = b"OfxActionUnload\0";
pub const kOfxActionPurgeCaches: &[u8; 21] = b"OfxActionPurgeCaches\0";
pub const kOfxActionSyncPrivateData: &[u8; 25] = b"OfxActionSyncPrivateData\0";
pub const kOfxActionCreateInstance: &[u8; 24] = b"OfxActionCreateInstance\0";
pub const kOfxActionDestroyInstance: &[u8; 25] = b"OfxActionDestroyInstance\0";
pub const kOfxActionInstanceChanged: &[u8; 25] = b"OfxActionInstanceChanged\0";
pub const kOfxActionBeginInstanceChanged: &[u8; 30] = b"OfxActionBeginInstanceChanged\0";
pub const kOfxActionEndInstanceChanged: &[u8; 28] = b"OfxActionEndInstanceChanged\0";
pub const kOfxActionBeginInstanceEdit: &[u8; 27] = b"OfxActionBeginInstanceEdit\0";
pub const kOfxActionEndInstanceEdit: &[u8; 25] = b"OfxActionEndInstanceEdit\0";
pub const kOfxPropAPIVersion: &[u8; 18] = b"OfxPropAPIVersion\0";
pub const kOfxPropTime: &[u8; 12] = b"OfxPropTime\0";
pub const kOfxPropIsInteractive: &[u8; 21] = b"OfxPropIsInteractive\0";
pub const kOfxPluginPropFilePath: &[u8; 22] = b"OfxPluginPropFilePath\0";
pub const kOfxPropInstanceData: &[u8; 20] = b"OfxPropInstanceData\0";
pub const kOfxPropType: &[u8; 12] = b"OfxPropType\0";
pub const kOfxPropName: &[u8; 12] = b"OfxPropName\0";
pub const kOfxPropVersion: &[u8; 15] = b"OfxPropVersion\0";
pub const kOfxPropVersionLabel: &[u8; 20] = b"OfxPropVersionLabel\0";
pub const kOfxPropPluginDescription: &[u8; 25] = b"OfxPropPluginDescription\0";
pub const kOfxPropLabel: &[u8; 13] = b"OfxPropLabel\0";
pub const kOfxPropIcon: &[u8; 12] = b"OfxPropIcon\0";
pub const kOfxPropShortLabel: &[u8; 18] = b"OfxPropShortLabel\0";
pub const kOfxPropLongLabel: &[u8; 17] = b"OfxPropLongLabel\0";
pub const kOfxPropChangeReason: &[u8; 20] = b"OfxPropChangeReason\0";
pub const kOfxPropEffectInstance: &[u8; 22] = b"OfxPropEffectInstance\0";
pub const kOfxPropHostOSHandle: &[u8; 20] = b"OfxPropHostOSHandle\0";
pub const kOfxChangeUserEdited: &[u8; 20] = b"OfxChangeUserEdited\0";
pub const kOfxChangePluginEdited: &[u8; 22] = b"OfxChangePluginEdited\0";
pub const kOfxChangeTime: &[u8; 14] = b"OfxChangeTime\0";
pub const kOfxBitDepthNone: &[u8; 16] = b"OfxBitDepthNone\0";
pub const kOfxBitDepthByte: &[u8; 16] = b"OfxBitDepthByte\0";
pub const kOfxBitDepthShort: &[u8; 17] = b"OfxBitDepthShort\0";
pub const kOfxBitDepthHalf: &[u8; 16] = b"OfxBitDepthHalf\0";
pub const kOfxBitDepthFloat: &[u8; 17] = b"OfxBitDepthFloat\0";
pub const kOfxStatOK: u32 = 0;
pub const kOfxPropertySuite: &[u8; 17] = b"OfxPropertySuite\0";
pub const kOfxParameterSuite: &[u8; 18] = b"OfxParameterSuite\0";
pub const kOfxTypeParameter: &[u8; 17] = b"OfxTypeParameter\0";
pub const kOfxTypeParameterInstance: &[u8; 25] = b"OfxTypeParameterInstance\0";
pub const kOfxParamTypeInteger: &[u8; 20] = b"OfxParamTypeInteger\0";
pub const kOfxParamTypeDouble: &[u8; 19] = b"OfxParamTypeDouble\0";
pub const kOfxParamTypeBoolean: &[u8; 20] = b"OfxParamTypeBoolean\0";
pub const kOfxParamTypeChoice: &[u8; 19] = b"OfxParamTypeChoice\0";
pub const kOfxParamTypeStrChoice: &[u8; 22] = b"OfxParamTypeStrChoice\0";
pub const kOfxParamTypeRGBA: &[u8; 17] = b"OfxParamTypeRGBA\0";
pub const kOfxParamTypeRGB: &[u8; 16] = b"OfxParamTypeRGB\0";
pub const kOfxParamTypeDouble2D: &[u8; 21] = b"OfxParamTypeDouble2D\0";
pub const kOfxParamTypeInteger2D: &[u8; 22] = b"OfxParamTypeInteger2D\0";
pub const kOfxParamTypeDouble3D: &[u8; 21] = b"OfxParamTypeDouble3D\0";
pub const kOfxParamTypeInteger3D: &[u8; 22] = b"OfxParamTypeInteger3D\0";
pub const kOfxParamTypeString: &[u8; 19] = b"OfxParamTypeString\0";
pub const kOfxParamTypeCustom: &[u8; 19] = b"OfxParamTypeCustom\0";
pub const kOfxParamTypeBytes: &[u8; 18] = b"OfxParamTypeBytes\0";
pub const kOfxParamTypeGroup: &[u8; 18] = b"OfxParamTypeGroup\0";
pub const kOfxParamTypePage: &[u8; 17] = b"OfxParamTypePage\0";
pub const kOfxParamTypePushButton: &[u8; 23] = b"OfxParamTypePushButton\0";
pub const kOfxParamHostPropSupportsCustomAnimation: &[u8; 40] =
    b"OfxParamHostPropSupportsCustomAnimation\0";
pub const kOfxParamHostPropSupportsStringAnimation: &[u8; 40] =
    b"OfxParamHostPropSupportsStringAnimation\0";
pub const kOfxParamHostPropSupportsBooleanAnimation: &[u8; 41] =
    b"OfxParamHostPropSupportsBooleanAnimation\0";
pub const kOfxParamHostPropSupportsChoiceAnimation: &[u8; 40] =
    b"OfxParamHostPropSupportsChoiceAnimation\0";
pub const kOfxParamHostPropSupportsCustomInteract: &[u8; 39] =
    b"OfxParamHostPropSupportsCustomInteract\0";
pub const kOfxParamHostPropMaxParameters: &[u8; 30] = b"OfxParamHostPropMaxParameters\0";
pub const kOfxParamHostPropMaxPages: &[u8; 25] = b"OfxParamHostPropMaxPages\0";
pub const kOfxParamHostPropPageRowColumnCount: &[u8; 35] = b"OfxParamHostPropPageRowColumnCount\0";
pub const kOfxParamPageSkipRow: &[u8; 20] = b"OfxParamPageSkipRow\0";
pub const kOfxParamPageSkipColumn: &[u8; 23] = b"OfxParamPageSkipColumn\0";
pub const kOfxParamPropInteractV1: &[u8; 23] = b"OfxParamPropInteractV1\0";
pub const kOfxParamPropInteractSize: &[u8; 25] = b"OfxParamPropInteractSize\0";
pub const kOfxParamPropInteractSizeAspect: &[u8; 31] = b"OfxParamPropInteractSizeAspect\0";
pub const kOfxParamPropInteractMinimumSize: &[u8; 32] = b"OfxParamPropInteractMinimumSize\0";
pub const kOfxParamPropInteractPreferedSize: &[u8; 33] = b"OfxParamPropInteractPreferedSize\0";
pub const kOfxParamPropType: &[u8; 17] = b"OfxParamPropType\0";
pub const kOfxParamPropAnimates: &[u8; 21] = b"OfxParamPropAnimates\0";
pub const kOfxParamPropCanUndo: &[u8; 20] = b"OfxParamPropCanUndo\0";
pub const kOfxPropParamSetNeedsSyncing: &[u8; 28] = b"OfxPropParamSetNeedsSyncing\0";
pub const kOfxParamPropIsAnimating: &[u8; 24] = b"OfxParamPropIsAnimating\0";
pub const kOfxParamPropPluginMayWrite: &[u8; 27] = b"OfxParamPropPluginMayWrite\0";
pub const kOfxParamPropPersistant: &[u8; 23] = b"OfxParamPropPersistant\0";
pub const kOfxParamPropEvaluateOnChange: &[u8; 29] = b"OfxParamPropEvaluateOnChange\0";
pub const kOfxParamPropSecret: &[u8; 19] = b"OfxParamPropSecret\0";
pub const kOfxParamPropScriptName: &[u8; 23] = b"OfxParamPropScriptName\0";
pub const kOfxParamPropCacheInvalidation: &[u8; 30] = b"OfxParamPropCacheInvalidation\0";
pub const kOfxParamInvalidateValueChange: &[u8; 30] = b"OfxParamInvalidateValueChange\0";
pub const kOfxParamInvalidateValueChangeToEnd: &[u8; 35] = b"OfxParamInvalidateValueChangeToEnd\0";
pub const kOfxParamInvalidateAll: &[u8; 22] = b"OfxParamInvalidateAll\0";
pub const kOfxParamPropHint: &[u8; 17] = b"OfxParamPropHint\0";
pub const kOfxParamPropDefault: &[u8; 20] = b"OfxParamPropDefault\0";
pub const kOfxParamPropDoubleType: &[u8; 23] = b"OfxParamPropDoubleType\0";
pub const kOfxParamDoubleTypePlain: &[u8; 24] = b"OfxParamDoubleTypePlain\0";
pub const kOfxParamDoubleTypeScale: &[u8; 24] = b"OfxParamDoubleTypeScale\0";
pub const kOfxParamDoubleTypeAngle: &[u8; 24] = b"OfxParamDoubleTypeAngle\0";
pub const kOfxParamDoubleTypeTime: &[u8; 23] = b"OfxParamDoubleTypeTime\0";
pub const kOfxParamDoubleTypeAbsoluteTime: &[u8; 31] = b"OfxParamDoubleTypeAbsoluteTime\0";
pub const kOfxParamDoubleTypeX: &[u8; 20] = b"OfxParamDoubleTypeX\0";
pub const kOfxParamDoubleTypeY: &[u8; 20] = b"OfxParamDoubleTypeY\0";
pub const kOfxParamDoubleTypeXAbsolute: &[u8; 28] = b"OfxParamDoubleTypeXAbsolute\0";
pub const kOfxParamDoubleTypeYAbsolute: &[u8; 28] = b"OfxParamDoubleTypeYAbsolute\0";
pub const kOfxParamDoubleTypeXY: &[u8; 21] = b"OfxParamDoubleTypeXY\0";
pub const kOfxParamDoubleTypeXYAbsolute: &[u8; 29] = b"OfxParamDoubleTypeXYAbsolute\0";
pub const kOfxParamPropDefaultCoordinateSystem: &[u8; 36] =
    b"OfxParamPropDefaultCoordinateSystem\0";
pub const kOfxParamCoordinatesCanonical: &[u8; 29] = b"OfxParamCoordinatesCanonical\0";
pub const kOfxParamCoordinatesNormalised: &[u8; 30] = b"OfxParamCoordinatesNormalised\0";
pub const kOfxParamPropHasHostOverlayHandle: &[u8; 33] = b"OfxParamPropHasHostOverlayHandle\0";
pub const kOfxParamPropUseHostOverlayHandle: &[u8; 34] = b"kOfxParamPropUseHostOverlayHandle\0";
pub const kOfxParamPropShowTimeMarker: &[u8; 27] = b"OfxParamPropShowTimeMarker\0";
pub const kOfxPluginPropParamPageOrder: &[u8; 28] = b"OfxPluginPropParamPageOrder\0";
pub const kOfxParamPropPageChild: &[u8; 22] = b"OfxParamPropPageChild\0";
pub const kOfxParamPropParent: &[u8; 19] = b"OfxParamPropParent\0";
pub const kOfxParamPropGroupOpen: &[u8; 22] = b"OfxParamPropGroupOpen\0";
pub const kOfxParamPropEnabled: &[u8; 20] = b"OfxParamPropEnabled\0";
pub const kOfxParamPropDataPtr: &[u8; 20] = b"OfxParamPropDataPtr\0";
pub const kOfxParamPropChoiceOption: &[u8; 25] = b"OfxParamPropChoiceOption\0";
pub const kOfxParamPropChoiceOrder: &[u8; 24] = b"OfxParamPropChoiceOrder\0";
pub const kOfxParamPropChoiceEnum: &[u8; 23] = b"OfxParamPropChoiceEnum\0";
pub const kOfxParamHostPropSupportsStrChoiceAnimation: &[u8; 43] =
    b"OfxParamHostPropSupportsStrChoiceAnimation\0";
pub const kOfxParamHostPropSupportsStrChoice: &[u8; 34] = b"OfxParamHostPropSupportsStrChoice\0";
pub const kOfxParamPropMin: &[u8; 16] = b"OfxParamPropMin\0";
pub const kOfxParamPropMax: &[u8; 16] = b"OfxParamPropMax\0";
pub const kOfxParamPropDisplayMin: &[u8; 23] = b"OfxParamPropDisplayMin\0";
pub const kOfxParamPropDisplayMax: &[u8; 23] = b"OfxParamPropDisplayMax\0";
pub const kOfxParamPropIncrement: &[u8; 22] = b"OfxParamPropIncrement\0";
pub const kOfxParamPropDigits: &[u8; 19] = b"OfxParamPropDigits\0";
pub const kOfxParamPropDimensionLabel: &[u8; 27] = b"OfxParamPropDimensionLabel\0";
pub const kOfxParamPropIsAutoKeying: &[u8; 25] = b"OfxParamPropIsAutoKeying\0";
pub const kOfxParamPropCustomInterpCallbackV1: &[u8; 29] = b"OfxParamPropCustomCallbackV1\0";
pub const kOfxParamPropStringMode: &[u8; 23] = b"OfxParamPropStringMode\0";
pub const kOfxParamPropStringFilePathExists: &[u8; 33] = b"OfxParamPropStringFilePathExists\0";
pub const kOfxParamStringIsSingleLine: &[u8; 27] = b"OfxParamStringIsSingleLine\0";
pub const kOfxParamStringIsMultiLine: &[u8; 26] = b"OfxParamStringIsMultiLine\0";
pub const kOfxParamStringIsFilePath: &[u8; 25] = b"OfxParamStringIsFilePath\0";
pub const kOfxParamStringIsDirectoryPath: &[u8; 30] = b"OfxParamStringIsDirectoryPath\0";
pub const kOfxParamStringIsLabel: &[u8; 22] = b"OfxParamStringIsLabel\0";
pub const kOfxParamStringIsRichTextFormat: &[u8; 31] = b"OfxParamStringIsRichTextFormat\0";
pub const kOfxParamPropCustomValue: &[u8; 24] = b"OfxParamPropCustomValue\0";
pub const kOfxParamPropInterpolationTime: &[u8; 30] = b"OfxParamPropInterpolationTime\0";
pub const kOfxParamPropInterpolationAmount: &[u8; 32] = b"OfxParamPropInterpolationAmount\0";
pub const kOfxInteractSuite: &[u8; 17] = b"OfxInteractSuite\0";
pub const kOfxInteractPropSlaveToParam: &[u8; 28] = b"OfxInteractPropSlaveToParam\0";
pub const kOfxInteractPropPixelScale: &[u8; 26] = b"OfxInteractPropPixelScale\0";
pub const kOfxInteractPropBackgroundColour: &[u8; 32] = b"OfxInteractPropBackgroundColour\0";
pub const kOfxInteractPropSuggestedColour: &[u8; 31] = b"OfxInteractPropSuggestedColour\0";
pub const kOfxInteractPropPenPosition: &[u8; 27] = b"OfxInteractPropPenPosition\0";
pub const kOfxInteractPropPenViewportPosition: &[u8; 35] = b"OfxInteractPropPenViewportPosition\0";
pub const kOfxInteractPropPenPressure: &[u8; 27] = b"OfxInteractPropPenPressure\0";
pub const kOfxInteractPropBitDepth: &[u8; 24] = b"OfxInteractPropBitDepth\0";
pub const kOfxInteractPropHasAlpha: &[u8; 24] = b"OfxInteractPropHasAlpha\0";
pub const kOfxActionDescribeInteract: &[u8; 18] = b"OfxActionDescribe\0";
pub const kOfxActionCreateInstanceInteract: &[u8; 24] = b"OfxActionCreateInstance\0";
pub const kOfxActionDestroyInstanceInteract: &[u8; 25] = b"OfxActionDestroyInstance\0";
pub const kOfxInteractActionDraw: &[u8; 22] = b"OfxInteractActionDraw\0";
pub const kOfxInteractActionPenMotion: &[u8; 27] = b"OfxInteractActionPenMotion\0";
pub const kOfxInteractActionPenDown: &[u8; 25] = b"OfxInteractActionPenDown\0";
pub const kOfxInteractActionPenUp: &[u8; 23] = b"OfxInteractActionPenUp\0";
pub const kOfxInteractActionKeyDown: &[u8; 25] = b"OfxInteractActionKeyDown\0";
pub const kOfxInteractActionKeyUp: &[u8; 23] = b"OfxInteractActionKeyUp\0";
pub const kOfxInteractActionKeyRepeat: &[u8; 27] = b"OfxInteractActionKeyRepeat\0";
pub const kOfxInteractActionGainFocus: &[u8; 27] = b"OfxInteractActionGainFocus\0";
pub const kOfxInteractActionLoseFocus: &[u8; 27] = b"OfxInteractActionLoseFocus\0";
pub const kOfxMessageSuite: &[u8; 16] = b"OfxMessageSuite\0";
pub const kOfxMessageFatal: &[u8; 16] = b"OfxMessageFatal\0";
pub const kOfxMessageError: &[u8; 16] = b"OfxMessageError\0";
pub const kOfxMessageWarning: &[u8; 18] = b"OfxMessageWarning\0";
pub const kOfxMessageMessage: &[u8; 18] = b"OfxMessageMessage\0";
pub const kOfxMessageLog: &[u8; 14] = b"OfxMessageLog\0";
pub const kOfxMessageQuestion: &[u8; 19] = b"OfxMessageQuestion\0";
pub const kOfxMemorySuite: &[u8; 15] = b"OfxMemorySuite\0";
pub const kOfxMultiThreadSuite: &[u8; 20] = b"OfxMultiThreadSuite\0";
pub const kOfxImageEffectPluginApi: &[u8; 24] = b"OfxImageEffectPluginAPI\0";
pub const kOfxImageEffectPluginApiVersion: u32 = 1;
pub const kOfxImageComponentNone: &[u8; 22] = b"OfxImageComponentNone\0";
pub const kOfxImageComponentRGBA: &[u8; 22] = b"OfxImageComponentRGBA\0";
pub const kOfxImageComponentRGB: &[u8; 21] = b"OfxImageComponentRGB\0";
pub const kOfxImageComponentAlpha: &[u8; 23] = b"OfxImageComponentAlpha\0";
pub const kOfxImageEffectContextGenerator: &[u8; 31] = b"OfxImageEffectContextGenerator\0";
pub const kOfxImageEffectContextFilter: &[u8; 28] = b"OfxImageEffectContextFilter\0";
pub const kOfxImageEffectContextTransition: &[u8; 32] = b"OfxImageEffectContextTransition\0";
pub const kOfxImageEffectContextPaint: &[u8; 27] = b"OfxImageEffectContextPaint\0";
pub const kOfxImageEffectContextGeneral: &[u8; 29] = b"OfxImageEffectContextGeneral\0";
pub const kOfxImageEffectContextRetimer: &[u8; 29] = b"OfxImageEffectContextRetimer\0";
pub const kOfxTypeImageEffectHost: &[u8; 23] = b"OfxTypeImageEffectHost\0";
pub const kOfxTypeImageEffect: &[u8; 19] = b"OfxTypeImageEffect\0";
pub const kOfxTypeImageEffectInstance: &[u8; 27] = b"OfxTypeImageEffectInstance\0";
pub const kOfxTypeClip: &[u8; 12] = b"OfxTypeClip\0";
pub const kOfxTypeImage: &[u8; 13] = b"OfxTypeImage\0";
pub const kOfxImageEffectActionGetRegionOfDefinition: &[u8; 42] =
    b"OfxImageEffectActionGetRegionOfDefinition\0";
pub const kOfxImageEffectActionGetRegionsOfInterest: &[u8; 41] =
    b"OfxImageEffectActionGetRegionsOfInterest\0";
pub const kOfxImageEffectActionGetTimeDomain: &[u8; 34] = b"OfxImageEffectActionGetTimeDomain\0";
pub const kOfxImageEffectActionGetFramesNeeded: &[u8; 36] =
    b"OfxImageEffectActionGetFramesNeeded\0";
pub const kOfxImageEffectActionGetClipPreferences: &[u8; 39] =
    b"OfxImageEffectActionGetClipPreferences\0";
pub const kOfxImageEffectActionIsIdentity: &[u8; 31] = b"OfxImageEffectActionIsIdentity\0";
pub const kOfxImageEffectActionRender: &[u8; 27] = b"OfxImageEffectActionRender\0";
pub const kOfxImageEffectActionBeginSequenceRender: &[u8; 40] =
    b"OfxImageEffectActionBeginSequenceRender\0";
pub const kOfxImageEffectActionEndSequenceRender: &[u8; 38] =
    b"OfxImageEffectActionEndSequenceRender\0";
pub const kOfxImageEffectActionDescribeInContext: &[u8; 38] =
    b"OfxImageEffectActionDescribeInContext\0";
pub const kOfxImageEffectPropSupportedContexts: &[u8; 36] =
    b"OfxImageEffectPropSupportedContexts\0";
pub const kOfxImageEffectPropPluginHandle: &[u8; 31] = b"OfxImageEffectPropPluginHandle\0";
pub const kOfxImageEffectHostPropIsBackground: &[u8; 35] = b"OfxImageEffectHostPropIsBackground\0";
pub const kOfxImageEffectPluginPropSingleInstance: &[u8; 39] =
    b"OfxImageEffectPluginPropSingleInstance\0";
pub const kOfxImageEffectPluginRenderThreadSafety: &[u8; 39] =
    b"OfxImageEffectPluginRenderThreadSafety\0";
pub const kOfxImageEffectRenderUnsafe: &[u8; 27] = b"OfxImageEffectRenderUnsafe\0";
pub const kOfxImageEffectRenderInstanceSafe: &[u8; 33] = b"OfxImageEffectRenderInstanceSafe\0";
pub const kOfxImageEffectRenderFullySafe: &[u8; 30] = b"OfxImageEffectRenderFullySafe\0";
pub const kOfxImageEffectPluginPropHostFrameThreading: &[u8; 43] =
    b"OfxImageEffectPluginPropHostFrameThreading\0";
pub const kOfxImageEffectPropSupportsMultipleClipDepths: &[u8; 37] =
    b"OfxImageEffectPropMultipleClipDepths\0";
pub const kOfxImageEffectPropSupportsMultipleClipPARs: &[u8; 43] =
    b"OfxImageEffectPropSupportsMultipleClipPARs\0";
pub const kOfxImageEffectPropClipPreferencesSlaveParam: &[u8; 44] =
    b"OfxImageEffectPropClipPreferencesSlaveParam\0";
pub const kOfxImageEffectPropSetableFrameRate: &[u8; 35] = b"OfxImageEffectPropSetableFrameRate\0";
pub const kOfxImageEffectPropSetableFielding: &[u8; 34] = b"OfxImageEffectPropSetableFielding\0";
pub const kOfxImageEffectInstancePropSequentialRender: &[u8; 43] =
    b"OfxImageEffectInstancePropSequentialRender\0";
pub const kOfxImageEffectPropSequentialRenderStatus: &[u8; 41] =
    b"OfxImageEffectPropSequentialRenderStatus\0";
pub const kOfxHostNativeOriginBottomLeft: &[u8; 46] =
    b"kOfxImageEffectHostPropNativeOriginBottomLeft\0";
pub const kOfxHostNativeOriginTopLeft: &[u8; 43] = b"kOfxImageEffectHostPropNativeOriginTopLeft\0";
pub const kOfxHostNativeOriginCenter: &[u8; 42] = b"kOfxImageEffectHostPropNativeOriginCenter\0";
pub const kOfxImageEffectHostPropNativeOrigin: &[u8; 35] = b"OfxImageEffectHostPropNativeOrigin\0";
pub const kOfxImageEffectPropInteractiveRenderStatus: &[u8; 42] =
    b"OfxImageEffectPropInteractiveRenderStatus\0";
pub const kOfxImageEffectPluginPropGrouping: &[u8; 33] = b"OfxImageEffectPluginPropGrouping\0";
pub const kOfxImageEffectPropSupportsOverlays: &[u8; 35] = b"OfxImageEffectPropSupportsOverlays\0";
pub const kOfxImageEffectPluginPropOverlayInteractV1: &[u8; 42] =
    b"OfxImageEffectPluginPropOverlayInteractV1\0";
pub const kOfxImageEffectPluginPropOverlayInteractV2: &[u8; 42] =
    b"OfxImageEffectPluginPropOverlayInteractV2\0";
pub const kOfxImageEffectPropSupportsMultiResolution: &[u8; 42] =
    b"OfxImageEffectPropSupportsMultiResolution\0";
pub const kOfxImageEffectPropSupportsTiles: &[u8; 32] = b"OfxImageEffectPropSupportsTiles\0";
pub const kOfxImageEffectPropTemporalClipAccess: &[u8; 37] =
    b"OfxImageEffectPropTemporalClipAccess\0";
pub const kOfxImageEffectPropContext: &[u8; 26] = b"OfxImageEffectPropContext\0";
pub const kOfxImageEffectPropPixelDepth: &[u8; 29] = b"OfxImageEffectPropPixelDepth\0";
pub const kOfxImageEffectPropComponents: &[u8; 29] = b"OfxImageEffectPropComponents\0";
pub const kOfxImagePropUniqueIdentifier: &[u8; 29] = b"OfxImagePropUniqueIdentifier\0";
pub const kOfxImageClipPropContinuousSamples: &[u8; 34] = b"OfxImageClipPropContinuousSamples\0";
pub const kOfxImageClipPropUnmappedPixelDepth: &[u8; 35] = b"OfxImageClipPropUnmappedPixelDepth\0";
pub const kOfxImageClipPropUnmappedComponents: &[u8; 35] = b"OfxImageClipPropUnmappedComponents\0";
pub const kOfxImageEffectPropPreMultiplication: &[u8; 36] =
    b"OfxImageEffectPropPreMultiplication\0";
pub const kOfxImageOpaque: &[u8; 15] = b"OfxImageOpaque\0";
pub const kOfxImagePreMultiplied: &[u8; 27] = b"OfxImageAlphaPremultiplied\0";
pub const kOfxImageUnPreMultiplied: &[u8; 29] = b"OfxImageAlphaUnPremultiplied\0";
pub const kOfxImageEffectPropSupportedPixelDepths: &[u8; 39] =
    b"OfxImageEffectPropSupportedPixelDepths\0";
pub const kOfxImageEffectPropSupportedComponents: &[u8; 38] =
    b"OfxImageEffectPropSupportedComponents\0";
pub const kOfxImageClipPropOptional: &[u8; 25] = b"OfxImageClipPropOptional\0";
pub const kOfxImageClipPropIsMask: &[u8; 23] = b"OfxImageClipPropIsMask\0";
pub const kOfxImagePropPixelAspectRatio: &[u8; 29] = b"OfxImagePropPixelAspectRatio\0";
pub const kOfxImageEffectPropFrameRate: &[u8; 28] = b"OfxImageEffectPropFrameRate\0";
pub const kOfxImageEffectPropUnmappedFrameRate: &[u8; 36] =
    b"OfxImageEffectPropUnmappedFrameRate\0";
pub const kOfxImageEffectPropFrameStep: &[u8; 28] = b"OfxImageEffectPropFrameStep\0";
pub const kOfxImageEffectPropFrameRange: &[u8; 29] = b"OfxImageEffectPropFrameRange\0";
pub const kOfxImageEffectPropUnmappedFrameRange: &[u8; 37] =
    b"OfxImageEffectPropUnmappedFrameRange\0";
pub const kOfxImageClipPropConnected: &[u8; 26] = b"OfxImageClipPropConnected\0";
pub const kOfxImageEffectFrameVarying: &[u8; 27] = b"OfxImageEffectFrameVarying\0";
pub const kOfxImageEffectPropRenderScale: &[u8; 30] = b"OfxImageEffectPropRenderScale\0";
pub const kOfxImageEffectPropRenderQualityDraft: &[u8; 37] =
    b"OfxImageEffectPropRenderQualityDraft\0";
pub const kOfxImageEffectPropProjectExtent: &[u8; 32] = b"OfxImageEffectPropProjectExtent\0";
pub const kOfxImageEffectPropProjectSize: &[u8; 30] = b"OfxImageEffectPropProjectSize\0";
pub const kOfxImageEffectPropProjectOffset: &[u8; 32] = b"OfxImageEffectPropProjectOffset\0";
pub const kOfxImageEffectPropProjectPixelAspectRatio: &[u8; 35] =
    b"OfxImageEffectPropPixelAspectRatio\0";
pub const kOfxImageEffectInstancePropEffectDuration: &[u8; 41] =
    b"OfxImageEffectInstancePropEffectDuration\0";
pub const kOfxImageClipPropFieldOrder: &[u8; 27] = b"OfxImageClipPropFieldOrder\0";
pub const kOfxImagePropData: &[u8; 17] = b"OfxImagePropData\0";
pub const kOfxImagePropBounds: &[u8; 19] = b"OfxImagePropBounds\0";
pub const kOfxImagePropRegionOfDefinition: &[u8; 31] = b"OfxImagePropRegionOfDefinition\0";
pub const kOfxImagePropRowBytes: &[u8; 21] = b"OfxImagePropRowBytes\0";
pub const kOfxImagePropField: &[u8; 18] = b"OfxImagePropField\0";
pub const kOfxImageEffectPluginPropFieldRenderTwiceAlways: &[u8; 47] =
    b"OfxImageEffectPluginPropFieldRenderTwiceAlways\0";
pub const kOfxImageClipPropFieldExtraction: &[u8; 32] = b"OfxImageClipPropFieldExtraction\0";
pub const kOfxImageEffectPropFieldToRender: &[u8; 32] = b"OfxImageEffectPropFieldToRender\0";
pub const kOfxImageEffectPropRegionOfDefinition: &[u8; 37] =
    b"OfxImageEffectPropRegionOfDefinition\0";
pub const kOfxImageEffectPropRegionOfInterest: &[u8; 35] = b"OfxImageEffectPropRegionOfInterest\0";
pub const kOfxImageEffectPropRenderWindow: &[u8; 31] = b"OfxImageEffectPropRenderWindow\0";
pub const kOfxImageFieldNone: &[u8; 13] = b"OfxFieldNone\0";
pub const kOfxImageFieldLower: &[u8; 14] = b"OfxFieldLower\0";
pub const kOfxImageFieldUpper: &[u8; 14] = b"OfxFieldUpper\0";
pub const kOfxImageFieldBoth: &[u8; 13] = b"OfxFieldBoth\0";
pub const kOfxImageFieldSingle: &[u8; 15] = b"OfxFieldSingle\0";
pub const kOfxImageFieldDoubled: &[u8; 16] = b"OfxFieldDoubled\0";
pub const kOfxImageEffectOutputClipName: &[u8; 7] = b"Output\0";
pub const kOfxImageEffectSimpleSourceClipName: &[u8; 7] = b"Source\0";
pub const kOfxImageEffectTransitionSourceFromClipName: &[u8; 11] = b"SourceFrom\0";
pub const kOfxImageEffectTransitionSourceToClipName: &[u8; 9] = b"SourceTo\0";
pub const kOfxImageEffectTransitionParamName: &[u8; 11] = b"Transition\0";
pub const kOfxImageEffectRetimerParamName: &[u8; 11] = b"SourceTime\0";
pub const kOfxImageEffectSuite: &[u8; 20] = b"OfxImageEffectSuite\0";
pub const kOfxOpenGLRenderSuite: &[u8; 32] = b"OfxImageEffectOpenGLRenderSuite\0";
pub const kOfxImageEffectPropOpenGLRenderSupported: &[u8; 40] =
    b"OfxImageEffectPropOpenGLRenderSupported\0";
pub const kOfxOpenGLPropPixelDepth: &[u8; 24] = b"OfxOpenGLPropPixelDepth\0";
pub const kOfxImageEffectPropOpenGLEnabled: &[u8; 32] = b"OfxImageEffectPropOpenGLEnabled\0";
pub const kOfxImageEffectPropOpenGLTextureIndex: &[u8; 37] =
    b"OfxImageEffectPropOpenGLTextureIndex\0";
pub const kOfxImageEffectPropOpenGLTextureTarget: &[u8; 38] =
    b"OfxImageEffectPropOpenGLTextureTarget\0";
pub const kOfxActionOpenGLContextAttached: &[u8; 31] = b"OfxActionOpenGLContextAttached\0";
pub const kOfxActionOpenGLContextDetached: &[u8; 32] = b"kOfxActionOpenGLContextDetached\0";
pub const kOfxImageEffectPropCudaRenderSupported: &[u8; 38] =
    b"OfxImageEffectPropCudaRenderSupported\0";
pub const kOfxImageEffectPropCudaEnabled: &[u8; 30] = b"OfxImageEffectPropCudaEnabled\0";
pub const kOfxImageEffectPropCudaStreamSupported: &[u8; 38] =
    b"OfxImageEffectPropCudaStreamSupported\0";
pub const kOfxImageEffectPropCudaStream: &[u8; 29] = b"OfxImageEffectPropCudaStream\0";
pub const kOfxImageEffectPropMetalRenderSupported: &[u8; 39] =
    b"OfxImageEffectPropMetalRenderSupported\0";
pub const kOfxImageEffectPropMetalEnabled: &[u8; 31] = b"OfxImageEffectPropMetalEnabled\0";
pub const kOfxImageEffectPropMetalCommandQueue: &[u8; 36] =
    b"OfxImageEffectPropMetalCommandQueue\0";
pub const kOfxImageEffectPropOpenCLRenderSupported: &[u8; 40] =
    b"OfxImageEffectPropOpenCLRenderSupported\0";
pub const kOfxImageEffectPropOpenCLSupported: &[u8; 34] = b"OfxImageEffectPropOpenCLSupported\0";
pub const kOfxImageEffectPropOpenCLEnabled: &[u8; 32] = b"OfxImageEffectPropOpenCLEnabled\0";
pub const kOfxImageEffectPropOpenCLCommandQueue: &[u8; 37] =
    b"OfxImageEffectPropOpenCLCommandQueue\0";
pub const kOfxImageEffectPropOpenCLImage: &[u8; 30] = b"OfxImageEffectPropOpenCLImage\0";
pub const kOfxOpenCLProgramSuite: &[u8; 22] = b"OfxOpenCLProgramSuite\0";
pub const kOfxProgressSuite: &[u8; 17] = b"OfxProgressSuite\0";
pub const kOfxTimeLineSuite: &[u8; 17] = b"OfxTimeLineSuite\0";
pub const kOfxParametricParameterSuite: &[u8; 28] = b"OfxParametricParameterSuite\0";
pub const kOfxParamTypeParametric: &[u8; 23] = b"OfxParamTypeParametric\0";
pub const kOfxParamPropParametricDimension: &[u8; 32] = b"OfxParamPropParametricDimension\0";
pub const kOfxParamPropParametricUIColour: &[u8; 31] = b"OfxParamPropParametricUIColour\0";
pub const kOfxParamPropParametricInteractBackground: &[u8; 41] =
    b"OfxParamPropParametricInteractBackground\0";
pub const kOfxParamHostPropSupportsParametricAnimation: &[u8; 44] =
    b"OfxParamHostPropSupportsParametricAnimation\0";
pub const kOfxParamPropParametricRange: &[u8; 28] = b"OfxParamPropParametricRange\0";
pub const kOfxDialogSuite: &[u8; 15] = b"OfxDialogSuite\0";
pub const kOfxActionDialog: &[u8; 16] = b"OfxActionDialog\0";
pub const kOfxDrawSuite: &[u8; 13] = b"OfxDrawSuite\0";
pub const kOfxInteractPropDrawContext: &[u8; 27] = b"OfxInteractPropDrawContext\0";
pub const kOfxPropKeySym: &[u8; 15] = b"kOfxPropKeySym\0";
pub const kOfxPropKeyString: &[u8; 18] = b"kOfxPropKeyString\0";
pub const kOfxKey_Unknown: u32 = 0;
pub const kOfxKey_BackSpace: u32 = 65288;
pub const kOfxKey_Tab: u32 = 65289;
pub const kOfxKey_Linefeed: u32 = 65290;
pub const kOfxKey_Clear: u32 = 65291;
pub const kOfxKey_Return: u32 = 65293;
pub const kOfxKey_Pause: u32 = 65299;
pub const kOfxKey_Scroll_Lock: u32 = 65300;
pub const kOfxKey_Sys_Req: u32 = 65301;
pub const kOfxKey_Escape: u32 = 65307;
pub const kOfxKey_Delete: u32 = 65535;
pub const kOfxKey_Multi_key: u32 = 65312;
pub const kOfxKey_SingleCandidate: u32 = 65340;
pub const kOfxKey_MultipleCandidate: u32 = 65341;
pub const kOfxKey_PreviousCandidate: u32 = 65342;
pub const kOfxKey_Kanji: u32 = 65313;
pub const kOfxKey_Muhenkan: u32 = 65314;
pub const kOfxKey_Henkan_Mode: u32 = 65315;
pub const kOfxKey_Henkan: u32 = 65315;
pub const kOfxKey_Romaji: u32 = 65316;
pub const kOfxKey_Hiragana: u32 = 65317;
pub const kOfxKey_Katakana: u32 = 65318;
pub const kOfxKey_Hiragana_Katakana: u32 = 65319;
pub const kOfxKey_Zenkaku: u32 = 65320;
pub const kOfxKey_Hankaku: u32 = 65321;
pub const kOfxKey_Zenkaku_Hankaku: u32 = 65322;
pub const kOfxKey_Touroku: u32 = 65323;
pub const kOfxKey_Massyo: u32 = 65324;
pub const kOfxKey_Kana_Lock: u32 = 65325;
pub const kOfxKey_Kana_Shift: u32 = 65326;
pub const kOfxKey_Eisu_Shift: u32 = 65327;
pub const kOfxKey_Eisu_toggle: u32 = 65328;
pub const kOfxKey_Zen_Koho: u32 = 65341;
pub const kOfxKey_Mae_Koho: u32 = 65342;
pub const kOfxKey_Home: u32 = 65360;
pub const kOfxKey_Left: u32 = 65361;
pub const kOfxKey_Up: u32 = 65362;
pub const kOfxKey_Right: u32 = 65363;
pub const kOfxKey_Down: u32 = 65364;
pub const kOfxKey_Prior: u32 = 65365;
pub const kOfxKey_Page_Up: u32 = 65365;
pub const kOfxKey_Next: u32 = 65366;
pub const kOfxKey_Page_Down: u32 = 65366;
pub const kOfxKey_End: u32 = 65367;
pub const kOfxKey_Begin: u32 = 65368;
pub const kOfxKey_Select: u32 = 65376;
pub const kOfxKey_Print: u32 = 65377;
pub const kOfxKey_Execute: u32 = 65378;
pub const kOfxKey_Insert: u32 = 65379;
pub const kOfxKey_Undo: u32 = 65381;
pub const kOfxKey_Redo: u32 = 65382;
pub const kOfxKey_Menu: u32 = 65383;
pub const kOfxKey_Find: u32 = 65384;
pub const kOfxKey_Cancel: u32 = 65385;
pub const kOfxKey_Help: u32 = 65386;
pub const kOfxKey_Break: u32 = 65387;
pub const kOfxKey_Mode_switch: u32 = 65406;
pub const kOfxKey_script_switch: u32 = 65406;
pub const kOfxKey_Num_Lock: u32 = 65407;
pub const kOfxKey_KP_Space: u32 = 65408;
pub const kOfxKey_KP_Tab: u32 = 65417;
pub const kOfxKey_KP_Enter: u32 = 65421;
pub const kOfxKey_KP_F1: u32 = 65425;
pub const kOfxKey_KP_F2: u32 = 65426;
pub const kOfxKey_KP_F3: u32 = 65427;
pub const kOfxKey_KP_F4: u32 = 65428;
pub const kOfxKey_KP_Home: u32 = 65429;
pub const kOfxKey_KP_Left: u32 = 65430;
pub const kOfxKey_KP_Up: u32 = 65431;
pub const kOfxKey_KP_Right: u32 = 65432;
pub const kOfxKey_KP_Down: u32 = 65433;
pub const kOfxKey_KP_Prior: u32 = 65434;
pub const kOfxKey_KP_Page_Up: u32 = 65434;
pub const kOfxKey_KP_Next: u32 = 65435;
pub const kOfxKey_KP_Page_Down: u32 = 65435;
pub const kOfxKey_KP_End: u32 = 65436;
pub const kOfxKey_KP_Begin: u32 = 65437;
pub const kOfxKey_KP_Insert: u32 = 65438;
pub const kOfxKey_KP_Delete: u32 = 65439;
pub const kOfxKey_KP_Equal: u32 = 65469;
pub const kOfxKey_KP_Multiply: u32 = 65450;
pub const kOfxKey_KP_Add: u32 = 65451;
pub const kOfxKey_KP_Separator: u32 = 65452;
pub const kOfxKey_KP_Subtract: u32 = 65453;
pub const kOfxKey_KP_Decimal: u32 = 65454;
pub const kOfxKey_KP_Divide: u32 = 65455;
pub const kOfxKey_KP_0: u32 = 65456;
pub const kOfxKey_KP_1: u32 = 65457;
pub const kOfxKey_KP_2: u32 = 65458;
pub const kOfxKey_KP_3: u32 = 65459;
pub const kOfxKey_KP_4: u32 = 65460;
pub const kOfxKey_KP_5: u32 = 65461;
pub const kOfxKey_KP_6: u32 = 65462;
pub const kOfxKey_KP_7: u32 = 65463;
pub const kOfxKey_KP_8: u32 = 65464;
pub const kOfxKey_KP_9: u32 = 65465;
pub const kOfxKey_F1: u32 = 65470;
pub const kOfxKey_F2: u32 = 65471;
pub const kOfxKey_F3: u32 = 65472;
pub const kOfxKey_F4: u32 = 65473;
pub const kOfxKey_F5: u32 = 65474;
pub const kOfxKey_F6: u32 = 65475;
pub const kOfxKey_F7: u32 = 65476;
pub const kOfxKey_F8: u32 = 65477;
pub const kOfxKey_F9: u32 = 65478;
pub const kOfxKey_F10: u32 = 65479;
pub const kOfxKey_F11: u32 = 65480;
pub const kOfxKey_L1: u32 = 65480;
pub const kOfxKey_F12: u32 = 65481;
pub const kOfxKey_L2: u32 = 65481;
pub const kOfxKey_F13: u32 = 65482;
pub const kOfxKey_L3: u32 = 65482;
pub const kOfxKey_F14: u32 = 65483;
pub const kOfxKey_L4: u32 = 65483;
pub const kOfxKey_F15: u32 = 65484;
pub const kOfxKey_L5: u32 = 65484;
pub const kOfxKey_F16: u32 = 65485;
pub const kOfxKey_L6: u32 = 65485;
pub const kOfxKey_F17: u32 = 65486;
pub const kOfxKey_L7: u32 = 65486;
pub const kOfxKey_F18: u32 = 65487;
pub const kOfxKey_L8: u32 = 65487;
pub const kOfxKey_F19: u32 = 65488;
pub const kOfxKey_L9: u32 = 65488;
pub const kOfxKey_F20: u32 = 65489;
pub const kOfxKey_L10: u32 = 65489;
pub const kOfxKey_F21: u32 = 65490;
pub const kOfxKey_R1: u32 = 65490;
pub const kOfxKey_F22: u32 = 65491;
pub const kOfxKey_R2: u32 = 65491;
pub const kOfxKey_F23: u32 = 65492;
pub const kOfxKey_R3: u32 = 65492;
pub const kOfxKey_F24: u32 = 65493;
pub const kOfxKey_R4: u32 = 65493;
pub const kOfxKey_F25: u32 = 65494;
pub const kOfxKey_R5: u32 = 65494;
pub const kOfxKey_F26: u32 = 65495;
pub const kOfxKey_R6: u32 = 65495;
pub const kOfxKey_F27: u32 = 65496;
pub const kOfxKey_R7: u32 = 65496;
pub const kOfxKey_F28: u32 = 65497;
pub const kOfxKey_R8: u32 = 65497;
pub const kOfxKey_F29: u32 = 65498;
pub const kOfxKey_R9: u32 = 65498;
pub const kOfxKey_F30: u32 = 65499;
pub const kOfxKey_R10: u32 = 65499;
pub const kOfxKey_F31: u32 = 65500;
pub const kOfxKey_R11: u32 = 65500;
pub const kOfxKey_F32: u32 = 65501;
pub const kOfxKey_R12: u32 = 65501;
pub const kOfxKey_F33: u32 = 65502;
pub const kOfxKey_R13: u32 = 65502;
pub const kOfxKey_F34: u32 = 65503;
pub const kOfxKey_R14: u32 = 65503;
pub const kOfxKey_F35: u32 = 65504;
pub const kOfxKey_R15: u32 = 65504;
pub const kOfxKey_Shift_L: u32 = 65505;
pub const kOfxKey_Shift_R: u32 = 65506;
pub const kOfxKey_Control_L: u32 = 65507;
pub const kOfxKey_Control_R: u32 = 65508;
pub const kOfxKey_Caps_Lock: u32 = 65509;
pub const kOfxKey_Shift_Lock: u32 = 65510;
pub const kOfxKey_Meta_L: u32 = 65511;
pub const kOfxKey_Meta_R: u32 = 65512;
pub const kOfxKey_Alt_L: u32 = 65513;
pub const kOfxKey_Alt_R: u32 = 65514;
pub const kOfxKey_Super_L: u32 = 65515;
pub const kOfxKey_Super_R: u32 = 65516;
pub const kOfxKey_Hyper_L: u32 = 65517;
pub const kOfxKey_Hyper_R: u32 = 65518;
pub const kOfxKey_space: u32 = 32;
pub const kOfxKey_exclam: u32 = 33;
pub const kOfxKey_quotedbl: u32 = 34;
pub const kOfxKey_numbersign: u32 = 35;
pub const kOfxKey_dollar: u32 = 36;
pub const kOfxKey_percent: u32 = 37;
pub const kOfxKey_ampersand: u32 = 38;
pub const kOfxKey_apostrophe: u32 = 39;
pub const kOfxKey_quoteright: u32 = 39;
pub const kOfxKey_parenleft: u32 = 40;
pub const kOfxKey_parenright: u32 = 41;
pub const kOfxKey_asterisk: u32 = 42;
pub const kOfxKey_plus: u32 = 43;
pub const kOfxKey_comma: u32 = 44;
pub const kOfxKey_minus: u32 = 45;
pub const kOfxKey_period: u32 = 46;
pub const kOfxKey_slash: u32 = 47;
pub const kOfxKey_0: u32 = 48;
pub const kOfxKey_1: u32 = 49;
pub const kOfxKey_2: u32 = 50;
pub const kOfxKey_3: u32 = 51;
pub const kOfxKey_4: u32 = 52;
pub const kOfxKey_5: u32 = 53;
pub const kOfxKey_6: u32 = 54;
pub const kOfxKey_7: u32 = 55;
pub const kOfxKey_8: u32 = 56;
pub const kOfxKey_9: u32 = 57;
pub const kOfxKey_colon: u32 = 58;
pub const kOfxKey_semicolon: u32 = 59;
pub const kOfxKey_less: u32 = 60;
pub const kOfxKey_equal: u32 = 61;
pub const kOfxKey_greater: u32 = 62;
pub const kOfxKey_question: u32 = 63;
pub const kOfxKey_at: u32 = 64;
pub const kOfxKey_A: u32 = 65;
pub const kOfxKey_B: u32 = 66;
pub const kOfxKey_C: u32 = 67;
pub const kOfxKey_D: u32 = 68;
pub const kOfxKey_E: u32 = 69;
pub const kOfxKey_F: u32 = 70;
pub const kOfxKey_G: u32 = 71;
pub const kOfxKey_H: u32 = 72;
pub const kOfxKey_I: u32 = 73;
pub const kOfxKey_J: u32 = 74;
pub const kOfxKey_K: u32 = 75;
pub const kOfxKey_L: u32 = 76;
pub const kOfxKey_M: u32 = 77;
pub const kOfxKey_N: u32 = 78;
pub const kOfxKey_O: u32 = 79;
pub const kOfxKey_P: u32 = 80;
pub const kOfxKey_Q: u32 = 81;
pub const kOfxKey_R: u32 = 82;
pub const kOfxKey_S: u32 = 83;
pub const kOfxKey_T: u32 = 84;
pub const kOfxKey_U: u32 = 85;
pub const kOfxKey_V: u32 = 86;
pub const kOfxKey_W: u32 = 87;
pub const kOfxKey_X: u32 = 88;
pub const kOfxKey_Y: u32 = 89;
pub const kOfxKey_Z: u32 = 90;
pub const kOfxKey_bracketleft: u32 = 91;
pub const kOfxKey_backslash: u32 = 92;
pub const kOfxKey_bracketright: u32 = 93;
pub const kOfxKey_asciicircum: u32 = 94;
pub const kOfxKey_underscore: u32 = 95;
pub const kOfxKey_grave: u32 = 96;
pub const kOfxKey_quoteleft: u32 = 96;
pub const kOfxKey_a: u32 = 97;
pub const kOfxKey_b: u32 = 98;
pub const kOfxKey_c: u32 = 99;
pub const kOfxKey_d: u32 = 100;
pub const kOfxKey_e: u32 = 101;
pub const kOfxKey_f: u32 = 102;
pub const kOfxKey_g: u32 = 103;
pub const kOfxKey_h: u32 = 104;
pub const kOfxKey_i: u32 = 105;
pub const kOfxKey_j: u32 = 106;
pub const kOfxKey_k: u32 = 107;
pub const kOfxKey_l: u32 = 108;
pub const kOfxKey_m: u32 = 109;
pub const kOfxKey_n: u32 = 110;
pub const kOfxKey_o: u32 = 111;
pub const kOfxKey_p: u32 = 112;
pub const kOfxKey_q: u32 = 113;
pub const kOfxKey_r: u32 = 114;
pub const kOfxKey_s: u32 = 115;
pub const kOfxKey_t: u32 = 116;
pub const kOfxKey_u: u32 = 117;
pub const kOfxKey_v: u32 = 118;
pub const kOfxKey_w: u32 = 119;
pub const kOfxKey_x: u32 = 120;
pub const kOfxKey_y: u32 = 121;
pub const kOfxKey_z: u32 = 122;
pub const kOfxKey_braceleft: u32 = 123;
pub const kOfxKey_bar: u32 = 124;
pub const kOfxKey_braceright: u32 = 125;
pub const kOfxKey_asciitilde: u32 = 126;
pub const kOfxKey_nobreakspace: u32 = 160;
pub const kOfxKey_exclamdown: u32 = 161;
pub const kOfxKey_cent: u32 = 162;
pub const kOfxKey_sterling: u32 = 163;
pub const kOfxKey_currency: u32 = 164;
pub const kOfxKey_yen: u32 = 165;
pub const kOfxKey_brokenbar: u32 = 166;
pub const kOfxKey_section: u32 = 167;
pub const kOfxKey_diaeresis: u32 = 168;
pub const kOfxKey_copyright: u32 = 169;
pub const kOfxKey_ordfeminine: u32 = 170;
pub const kOfxKey_guillemotleft: u32 = 171;
pub const kOfxKey_notsign: u32 = 172;
pub const kOfxKey_hyphen: u32 = 173;
pub const kOfxKey_registered: u32 = 174;
pub const kOfxKey_macron: u32 = 175;
pub const kOfxKey_degree: u32 = 176;
pub const kOfxKey_plusminus: u32 = 177;
pub const kOfxKey_twosuperior: u32 = 178;
pub const kOfxKey_threesuperior: u32 = 179;
pub const kOfxKey_acute: u32 = 180;
pub const kOfxKey_mu: u32 = 181;
pub const kOfxKey_paragraph: u32 = 182;
pub const kOfxKey_periodcentered: u32 = 183;
pub const kOfxKey_cedilla: u32 = 184;
pub const kOfxKey_onesuperior: u32 = 185;
pub const kOfxKey_masculine: u32 = 186;
pub const kOfxKey_guillemotright: u32 = 187;
pub const kOfxKey_onequarter: u32 = 188;
pub const kOfxKey_onehalf: u32 = 189;
pub const kOfxKey_threequarters: u32 = 190;
pub const kOfxKey_questiondown: u32 = 191;
pub const kOfxKey_Agrave: u32 = 192;
pub const kOfxKey_Aacute: u32 = 193;
pub const kOfxKey_Acircumflex: u32 = 194;
pub const kOfxKey_Atilde: u32 = 195;
pub const kOfxKey_Adiaeresis: u32 = 196;
pub const kOfxKey_Aring: u32 = 197;
pub const kOfxKey_AE: u32 = 198;
pub const kOfxKey_Ccedilla: u32 = 199;
pub const kOfxKey_Egrave: u32 = 200;
pub const kOfxKey_Eacute: u32 = 201;
pub const kOfxKey_Ecircumflex: u32 = 202;
pub const kOfxKey_Ediaeresis: u32 = 203;
pub const kOfxKey_Igrave: u32 = 204;
pub const kOfxKey_Iacute: u32 = 205;
pub const kOfxKey_Icircumflex: u32 = 206;
pub const kOfxKey_Idiaeresis: u32 = 207;
pub const kOfxKey_ETH: u32 = 208;
pub const kOfxKey_Eth: u32 = 208;
pub const kOfxKey_Ntilde: u32 = 209;
pub const kOfxKey_Ograve: u32 = 210;
pub const kOfxKey_Oacute: u32 = 211;
pub const kOfxKey_Ocircumflex: u32 = 212;
pub const kOfxKey_Otilde: u32 = 213;
pub const kOfxKey_Odiaeresis: u32 = 214;
pub const kOfxKey_multiply: u32 = 215;
pub const kOfxKey_Ooblique: u32 = 216;
pub const kOfxKey_Ugrave: u32 = 217;
pub const kOfxKey_Uacute: u32 = 218;
pub const kOfxKey_Ucircumflex: u32 = 219;
pub const kOfxKey_Udiaeresis: u32 = 220;
pub const kOfxKey_Yacute: u32 = 221;
pub const kOfxKey_THORN: u32 = 222;
pub const kOfxKey_ssharp: u32 = 223;
pub const kOfxKey_agrave: u32 = 224;
pub const kOfxKey_aacute: u32 = 225;
pub const kOfxKey_acircumflex: u32 = 226;
pub const kOfxKey_atilde: u32 = 227;
pub const kOfxKey_adiaeresis: u32 = 228;
pub const kOfxKey_aring: u32 = 229;
pub const kOfxKey_ae: u32 = 230;
pub const kOfxKey_ccedilla: u32 = 231;
pub const kOfxKey_egrave: u32 = 232;
pub const kOfxKey_eacute: u32 = 233;
pub const kOfxKey_ecircumflex: u32 = 234;
pub const kOfxKey_ediaeresis: u32 = 235;
pub const kOfxKey_igrave: u32 = 236;
pub const kOfxKey_iacute: u32 = 237;
pub const kOfxKey_icircumflex: u32 = 238;
pub const kOfxKey_idiaeresis: u32 = 239;
pub const kOfxKey_eth: u32 = 240;
pub const kOfxKey_ntilde: u32 = 241;
pub const kOfxKey_ograve: u32 = 242;
pub const kOfxKey_oacute: u32 = 243;
pub const kOfxKey_ocircumflex: u32 = 244;
pub const kOfxKey_otilde: u32 = 245;
pub const kOfxKey_odiaeresis: u32 = 246;
pub const kOfxKey_division: u32 = 247;
pub const kOfxKey_oslash: u32 = 248;
pub const kOfxKey_ugrave: u32 = 249;
pub const kOfxKey_uacute: u32 = 250;
pub const kOfxKey_ucircumflex: u32 = 251;
pub const kOfxKey_udiaeresis: u32 = 252;
pub const kOfxKey_yacute: u32 = 253;
pub const kOfxKey_thorn: u32 = 254;
pub const kOfxKey_ydiaeresis: u32 = 255;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxPropertySetStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxPropertySetHandle(pub *mut OfxPropertySetStruct);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxStatus(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxHost {
    pub host: OfxPropertySetHandle,
    pub fetchSuite: ::std::option::Option<
        unsafe extern "C" fn(
            host: OfxPropertySetHandle,
            suiteName: *const ::std::os::raw::c_char,
            suiteVersion: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_OfxHost() {
    const UNINIT: ::std::mem::MaybeUninit<OfxHost> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<OfxHost>(), 16usize, "Size of OfxHost");
    assert_eq!(
        ::std::mem::align_of::<OfxHost>(),
        8usize,
        "Alignment of OfxHost"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxHost::host"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fetchSuite) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxHost::fetchSuite"
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxPluginEntryPoint(
    pub  ::std::option::Option<
        unsafe extern "C" fn(
            action: *const ::std::os::raw::c_char,
            handle: *const ::std::os::raw::c_void,
            inArgs: OfxPropertySetHandle,
            outArgs: OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxPlugin {
    pub pluginApi: *const ::std::os::raw::c_char,
    pub apiVersion: ::std::os::raw::c_int,
    pub pluginIdentifier: *const ::std::os::raw::c_char,
    pub pluginVersionMajor: ::std::os::raw::c_uint,
    pub pluginVersionMinor: ::std::os::raw::c_uint,
    pub setHost: ::std::option::Option<unsafe extern "C" fn(host: *mut OfxHost)>,
    pub mainEntry: OfxPluginEntryPoint,
}
#[test]
fn bindgen_test_layout_OfxPlugin() {
    const UNINIT: ::std::mem::MaybeUninit<OfxPlugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxPlugin>(),
        48usize,
        "Size of OfxPlugin"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxPlugin>(),
        8usize,
        "Alignment of OfxPlugin"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pluginApi) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxPlugin::pluginApi"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiVersion) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxPlugin::apiVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pluginIdentifier) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxPlugin::pluginIdentifier"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pluginVersionMajor) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxPlugin::pluginVersionMajor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pluginVersionMinor) as usize - ptr as usize },
        28usize,
        "Offset of field: OfxPlugin::pluginVersionMinor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setHost) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxPlugin::setHost"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mainEntry) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxPlugin::mainEntry"
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxTime(pub f64);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRangeI {
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OfxRangeI() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRangeI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRangeI>(),
        8usize,
        "Size of OfxRangeI"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRangeI>(),
        4usize,
        "Alignment of OfxRangeI"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRangeI::min"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRangeI::max"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRangeD {
    pub min: f64,
    pub max: f64,
}
#[test]
fn bindgen_test_layout_OfxRangeD() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRangeD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRangeD>(),
        16usize,
        "Size of OfxRangeD"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRangeD>(),
        8usize,
        "Alignment of OfxRangeD"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRangeD::min"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRangeD::max"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxPointI {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OfxPointI() {
    const UNINIT: ::std::mem::MaybeUninit<OfxPointI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxPointI>(),
        8usize,
        "Size of OfxPointI"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxPointI>(),
        4usize,
        "Alignment of OfxPointI"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxPointI::x"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxPointI::y"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxPointD {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_OfxPointD() {
    const UNINIT: ::std::mem::MaybeUninit<OfxPointD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxPointD>(),
        16usize,
        "Size of OfxPointD"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxPointD>(),
        8usize,
        "Alignment of OfxPointD"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxPointD::x"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxPointD::y"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRectI {
    pub x1: ::std::os::raw::c_int,
    pub y1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_int,
    pub y2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OfxRectI() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRectI> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRectI>(),
        16usize,
        "Size of OfxRectI"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRectI>(),
        4usize,
        "Alignment of OfxRectI"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRectI::x1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRectI::y1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRectI::x2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        12usize,
        "Offset of field: OfxRectI::y2"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRectD {
    pub x1: f64,
    pub y1: f64,
    pub x2: f64,
    pub y2: f64,
}
#[test]
fn bindgen_test_layout_OfxRectD() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRectD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRectD>(),
        32usize,
        "Size of OfxRectD"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRectD>(),
        8usize,
        "Alignment of OfxRectD"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRectD::x1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRectD::y1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxRectD::x2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxRectD::y2"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxPropertySuiteV1 {
    pub propSetPointer: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub propSetString: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub propSetDouble: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: f64,
        ) -> OfxStatus,
    >,
    pub propSetInt: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub propSetPointerN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *const *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub propSetStringN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *const *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub propSetDoubleN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *const f64,
        ) -> OfxStatus,
    >,
    pub propSetIntN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *const ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub propGetPointer: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *mut *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub propGetString: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub propGetDouble: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *mut f64,
        ) -> OfxStatus,
    >,
    pub propGetInt: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub propGetPointerN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *mut *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub propGetStringN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub propGetDoubleN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *mut f64,
        ) -> OfxStatus,
    >,
    pub propGetIntN: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub propReset: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub propGetDimension: ::std::option::Option<
        unsafe extern "C" fn(
            properties: OfxPropertySetHandle,
            property: *const ::std::os::raw::c_char,
            count: *mut ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxPropertySuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxPropertySuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxPropertySuiteV1>(),
        144usize,
        "Size of OfxPropertySuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxPropertySuiteV1>(),
        8usize,
        "Alignment of OfxPropertySuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetPointer) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxPropertySuiteV1::propSetPointer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetString) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxPropertySuiteV1::propSetString"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetDouble) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxPropertySuiteV1::propSetDouble"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetInt) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxPropertySuiteV1::propSetInt"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetPointerN) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxPropertySuiteV1::propSetPointerN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetStringN) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxPropertySuiteV1::propSetStringN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetDoubleN) as usize - ptr as usize },
        48usize,
        "Offset of field: OfxPropertySuiteV1::propSetDoubleN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propSetIntN) as usize - ptr as usize },
        56usize,
        "Offset of field: OfxPropertySuiteV1::propSetIntN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetPointer) as usize - ptr as usize },
        64usize,
        "Offset of field: OfxPropertySuiteV1::propGetPointer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetString) as usize - ptr as usize },
        72usize,
        "Offset of field: OfxPropertySuiteV1::propGetString"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetDouble) as usize - ptr as usize },
        80usize,
        "Offset of field: OfxPropertySuiteV1::propGetDouble"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetInt) as usize - ptr as usize },
        88usize,
        "Offset of field: OfxPropertySuiteV1::propGetInt"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetPointerN) as usize - ptr as usize },
        96usize,
        "Offset of field: OfxPropertySuiteV1::propGetPointerN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetStringN) as usize - ptr as usize },
        104usize,
        "Offset of field: OfxPropertySuiteV1::propGetStringN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetDoubleN) as usize - ptr as usize },
        112usize,
        "Offset of field: OfxPropertySuiteV1::propGetDoubleN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetIntN) as usize - ptr as usize },
        120usize,
        "Offset of field: OfxPropertySuiteV1::propGetIntN"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propReset) as usize - ptr as usize },
        128usize,
        "Offset of field: OfxPropertySuiteV1::propReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propGetDimension) as usize - ptr as usize },
        136usize,
        "Offset of field: OfxPropertySuiteV1::propGetDimension"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxParamStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxParamHandle(pub *mut OfxParamStruct);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxParamSetStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxParamSetHandle(pub *mut OfxParamSetStruct);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxBytes {
    pub data: *const ::std::os::raw::c_uchar,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_OfxBytes() {
    const UNINIT: ::std::mem::MaybeUninit<OfxBytes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxBytes>(),
        16usize,
        "Size of OfxBytes"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxBytes>(),
        8usize,
        "Alignment of OfxBytes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxBytes::data"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxBytes::length"
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxCustomParamInterpFuncV1(
    pub  ::std::option::Option<
        unsafe extern "C" fn(
            instance: OfxParamSetHandle,
            inArgs: OfxPropertySetHandle,
            outArgs: OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxParameterSuiteV1 {
    pub paramDefine: ::std::option::Option<
        unsafe extern "C" fn(
            paramSet: OfxParamSetHandle,
            paramType: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            propertySet: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub paramGetHandle: ::std::option::Option<
        unsafe extern "C" fn(
            paramSet: OfxParamSetHandle,
            name: *const ::std::os::raw::c_char,
            param: *mut OfxParamHandle,
            propertySet: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub paramSetGetPropertySet: ::std::option::Option<
        unsafe extern "C" fn(
            paramSet: OfxParamSetHandle,
            propHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub paramGetPropertySet: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            propHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub paramGetValue:
        ::std::option::Option<unsafe extern "C" fn(paramHandle: OfxParamHandle, ...) -> OfxStatus>,
    pub paramGetValueAtTime: ::std::option::Option<
        unsafe extern "C" fn(paramHandle: OfxParamHandle, time: OfxTime, ...) -> OfxStatus,
    >,
    pub paramGetDerivative: ::std::option::Option<
        unsafe extern "C" fn(paramHandle: OfxParamHandle, time: OfxTime, ...) -> OfxStatus,
    >,
    pub paramGetIntegral: ::std::option::Option<
        unsafe extern "C" fn(
            paramHandle: OfxParamHandle,
            time1: OfxTime,
            time2: OfxTime,
            ...
        ) -> OfxStatus,
    >,
    pub paramSetValue:
        ::std::option::Option<unsafe extern "C" fn(paramHandle: OfxParamHandle, ...) -> OfxStatus>,
    pub paramSetValueAtTime: ::std::option::Option<
        unsafe extern "C" fn(paramHandle: OfxParamHandle, time: OfxTime, ...) -> OfxStatus,
    >,
    pub paramGetNumKeys: ::std::option::Option<
        unsafe extern "C" fn(
            paramHandle: OfxParamHandle,
            numberOfKeys: *mut ::std::os::raw::c_uint,
        ) -> OfxStatus,
    >,
    pub paramGetKeyTime: ::std::option::Option<
        unsafe extern "C" fn(
            paramHandle: OfxParamHandle,
            nthKey: ::std::os::raw::c_uint,
            time: *mut OfxTime,
        ) -> OfxStatus,
    >,
    pub paramGetKeyIndex: ::std::option::Option<
        unsafe extern "C" fn(
            paramHandle: OfxParamHandle,
            time: OfxTime,
            direction: ::std::os::raw::c_int,
            index: *mut ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub paramDeleteKey: ::std::option::Option<
        unsafe extern "C" fn(paramHandle: OfxParamHandle, time: OfxTime) -> OfxStatus,
    >,
    pub paramDeleteAllKeys:
        ::std::option::Option<unsafe extern "C" fn(paramHandle: OfxParamHandle) -> OfxStatus>,
    pub paramCopy: ::std::option::Option<
        unsafe extern "C" fn(
            paramTo: OfxParamHandle,
            paramFrom: OfxParamHandle,
            dstOffset: OfxTime,
            frameRange: *const OfxRangeD,
        ) -> OfxStatus,
    >,
    pub paramEditBegin: ::std::option::Option<
        unsafe extern "C" fn(
            paramSet: OfxParamSetHandle,
            name: *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub paramEditEnd:
        ::std::option::Option<unsafe extern "C" fn(paramSet: OfxParamSetHandle) -> OfxStatus>,
}
#[test]
fn bindgen_test_layout_OfxParameterSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxParameterSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxParameterSuiteV1>(),
        144usize,
        "Size of OfxParameterSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxParameterSuiteV1>(),
        8usize,
        "Alignment of OfxParameterSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramDefine) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxParameterSuiteV1::paramDefine"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetHandle) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxParameterSuiteV1::paramGetHandle"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramSetGetPropertySet) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxParameterSuiteV1::paramSetGetPropertySet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetPropertySet) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxParameterSuiteV1::paramGetPropertySet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetValue) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxParameterSuiteV1::paramGetValue"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetValueAtTime) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxParameterSuiteV1::paramGetValueAtTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetDerivative) as usize - ptr as usize },
        48usize,
        "Offset of field: OfxParameterSuiteV1::paramGetDerivative"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetIntegral) as usize - ptr as usize },
        56usize,
        "Offset of field: OfxParameterSuiteV1::paramGetIntegral"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramSetValue) as usize - ptr as usize },
        64usize,
        "Offset of field: OfxParameterSuiteV1::paramSetValue"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramSetValueAtTime) as usize - ptr as usize },
        72usize,
        "Offset of field: OfxParameterSuiteV1::paramSetValueAtTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetNumKeys) as usize - ptr as usize },
        80usize,
        "Offset of field: OfxParameterSuiteV1::paramGetNumKeys"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetKeyTime) as usize - ptr as usize },
        88usize,
        "Offset of field: OfxParameterSuiteV1::paramGetKeyTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramGetKeyIndex) as usize - ptr as usize },
        96usize,
        "Offset of field: OfxParameterSuiteV1::paramGetKeyIndex"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramDeleteKey) as usize - ptr as usize },
        104usize,
        "Offset of field: OfxParameterSuiteV1::paramDeleteKey"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramDeleteAllKeys) as usize - ptr as usize },
        112usize,
        "Offset of field: OfxParameterSuiteV1::paramDeleteAllKeys"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramCopy) as usize - ptr as usize },
        120usize,
        "Offset of field: OfxParameterSuiteV1::paramCopy"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramEditBegin) as usize - ptr as usize },
        128usize,
        "Offset of field: OfxParameterSuiteV1::paramEditBegin"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramEditEnd) as usize - ptr as usize },
        136usize,
        "Offset of field: OfxParameterSuiteV1::paramEditEnd"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxInteract {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxInteractHandle(pub *mut OfxInteract);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxInteractSuiteV1 {
    pub interactSwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(interactInstance: OfxInteractHandle) -> OfxStatus,
    >,
    pub interactRedraw: ::std::option::Option<
        unsafe extern "C" fn(interactInstance: OfxInteractHandle) -> OfxStatus,
    >,
    pub interactGetPropertySet: ::std::option::Option<
        unsafe extern "C" fn(
            interactInstance: OfxInteractHandle,
            property: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxInteractSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxInteractSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxInteractSuiteV1>(),
        24usize,
        "Size of OfxInteractSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxInteractSuiteV1>(),
        8usize,
        "Alignment of OfxInteractSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interactSwapBuffers) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxInteractSuiteV1::interactSwapBuffers"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interactRedraw) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxInteractSuiteV1::interactRedraw"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interactGetPropertySet) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxInteractSuiteV1::interactGetPropertySet"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxMessageSuiteV1 {
    pub message: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            messageType: *const ::std::os::raw::c_char,
            messageId: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxMessageSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxMessageSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxMessageSuiteV1>(),
        8usize,
        "Size of OfxMessageSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxMessageSuiteV1>(),
        8usize,
        "Alignment of OfxMessageSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxMessageSuiteV1::message"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxMessageSuiteV2 {
    pub message: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            messageType: *const ::std::os::raw::c_char,
            messageId: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> OfxStatus,
    >,
    pub setPersistentMessage: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            messageType: *const ::std::os::raw::c_char,
            messageId: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> OfxStatus,
    >,
    pub clearPersistentMessage: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxMessageSuiteV2() {
    const UNINIT: ::std::mem::MaybeUninit<OfxMessageSuiteV2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxMessageSuiteV2>(),
        24usize,
        "Size of OfxMessageSuiteV2"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxMessageSuiteV2>(),
        8usize,
        "Alignment of OfxMessageSuiteV2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxMessageSuiteV2::message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setPersistentMessage) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxMessageSuiteV2::setPersistentMessage"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearPersistentMessage) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxMessageSuiteV2::clearPersistentMessage"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxMemorySuiteV1 {
    pub memoryAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            nBytes: usize,
            allocatedData: *mut *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub memoryFree: ::std::option::Option<
        unsafe extern "C" fn(allocatedData: *mut ::std::os::raw::c_void) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxMemorySuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxMemorySuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxMemorySuiteV1>(),
        16usize,
        "Size of OfxMemorySuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxMemorySuiteV1>(),
        8usize,
        "Alignment of OfxMemorySuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryAlloc) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxMemorySuiteV1::memoryAlloc"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryFree) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxMemorySuiteV1::memoryFree"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxMutex {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxMutexHandle(pub *mut OfxMutex);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxThreadFunctionV1(
    pub  ::std::option::Option<
        unsafe extern "C" fn(
            threadIndex: ::std::os::raw::c_uint,
            threadMax: ::std::os::raw::c_uint,
            customArg: *mut ::std::os::raw::c_void,
        ),
    >,
);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxMultiThreadSuiteV1 {
    pub multiThread: ::std::option::Option<
        unsafe extern "C" fn(
            func: OfxThreadFunctionV1,
            nThreads: ::std::os::raw::c_uint,
            customArg: *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub multiThreadNumCPUs: ::std::option::Option<
        unsafe extern "C" fn(nCPUs: *mut ::std::os::raw::c_uint) -> OfxStatus,
    >,
    pub multiThreadIndex: ::std::option::Option<
        unsafe extern "C" fn(threadIndex: *mut ::std::os::raw::c_uint) -> OfxStatus,
    >,
    pub multiThreadIsSpawnedThread:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub mutexCreate: ::std::option::Option<
        unsafe extern "C" fn(
            mutex: *mut OfxMutexHandle,
            lockCount: ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub mutexDestroy:
        ::std::option::Option<unsafe extern "C" fn(mutex: OfxMutexHandle) -> OfxStatus>,
    pub mutexLock: ::std::option::Option<unsafe extern "C" fn(mutex: OfxMutexHandle) -> OfxStatus>,
    pub mutexUnLock:
        ::std::option::Option<unsafe extern "C" fn(mutex: OfxMutexHandle) -> OfxStatus>,
    pub mutexTryLock:
        ::std::option::Option<unsafe extern "C" fn(mutex: OfxMutexHandle) -> OfxStatus>,
}
#[test]
fn bindgen_test_layout_OfxMultiThreadSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxMultiThreadSuiteV1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxMultiThreadSuiteV1>(),
        72usize,
        "Size of OfxMultiThreadSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxMultiThreadSuiteV1>(),
        8usize,
        "Alignment of OfxMultiThreadSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiThread) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxMultiThreadSuiteV1::multiThread"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiThreadNumCPUs) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxMultiThreadSuiteV1::multiThreadNumCPUs"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiThreadIndex) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxMultiThreadSuiteV1::multiThreadIndex"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiThreadIsSpawnedThread) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxMultiThreadSuiteV1::multiThreadIsSpawnedThread"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutexCreate) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxMultiThreadSuiteV1::mutexCreate"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutexDestroy) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxMultiThreadSuiteV1::mutexDestroy"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutexLock) as usize - ptr as usize },
        48usize,
        "Offset of field: OfxMultiThreadSuiteV1::mutexLock"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutexUnLock) as usize - ptr as usize },
        56usize,
        "Offset of field: OfxMultiThreadSuiteV1::mutexUnLock"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutexTryLock) as usize - ptr as usize },
        64usize,
        "Offset of field: OfxMultiThreadSuiteV1::mutexTryLock"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxImageEffectStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxImageEffectHandle(pub *mut OfxImageEffectStruct);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxImageClipStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxImageClipHandle(pub *mut OfxImageClipStruct);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxImageMemoryStruct {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxImageMemoryHandle(pub *mut OfxImageMemoryStruct);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxImageEffectSuiteV1 {
    pub getPropertySet: ::std::option::Option<
        unsafe extern "C" fn(
            imageEffect: OfxImageEffectHandle,
            propHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub getParamSet: ::std::option::Option<
        unsafe extern "C" fn(
            imageEffect: OfxImageEffectHandle,
            paramSet: *mut OfxParamSetHandle,
        ) -> OfxStatus,
    >,
    pub clipDefine: ::std::option::Option<
        unsafe extern "C" fn(
            imageEffect: OfxImageEffectHandle,
            name: *const ::std::os::raw::c_char,
            propertySet: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub clipGetHandle: ::std::option::Option<
        unsafe extern "C" fn(
            imageEffect: OfxImageEffectHandle,
            name: *const ::std::os::raw::c_char,
            clip: *mut OfxImageClipHandle,
            propertySet: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub clipGetPropertySet: ::std::option::Option<
        unsafe extern "C" fn(
            clip: OfxImageClipHandle,
            propHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub clipGetImage: ::std::option::Option<
        unsafe extern "C" fn(
            clip: OfxImageClipHandle,
            time: OfxTime,
            region: *const OfxRectD,
            imageHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub clipReleaseImage:
        ::std::option::Option<unsafe extern "C" fn(imageHandle: OfxPropertySetHandle) -> OfxStatus>,
    pub clipGetRegionOfDefinition: ::std::option::Option<
        unsafe extern "C" fn(
            clip: OfxImageClipHandle,
            time: OfxTime,
            bounds: *mut OfxRectD,
        ) -> OfxStatus,
    >,
    pub abort: ::std::option::Option<
        unsafe extern "C" fn(imageEffect: OfxImageEffectHandle) -> ::std::os::raw::c_int,
    >,
    pub imageMemoryAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            instanceHandle: OfxImageEffectHandle,
            nBytes: usize,
            memoryHandle: *mut OfxImageMemoryHandle,
        ) -> OfxStatus,
    >,
    pub imageMemoryFree: ::std::option::Option<
        unsafe extern "C" fn(memoryHandle: OfxImageMemoryHandle) -> OfxStatus,
    >,
    pub imageMemoryLock: ::std::option::Option<
        unsafe extern "C" fn(
            memoryHandle: OfxImageMemoryHandle,
            returnedPtr: *mut *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
    pub imageMemoryUnlock: ::std::option::Option<
        unsafe extern "C" fn(memoryHandle: OfxImageMemoryHandle) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxImageEffectSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxImageEffectSuiteV1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxImageEffectSuiteV1>(),
        104usize,
        "Size of OfxImageEffectSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxImageEffectSuiteV1>(),
        8usize,
        "Alignment of OfxImageEffectSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPropertySet) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxImageEffectSuiteV1::getPropertySet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getParamSet) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxImageEffectSuiteV1::getParamSet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipDefine) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxImageEffectSuiteV1::clipDefine"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipGetHandle) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxImageEffectSuiteV1::clipGetHandle"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipGetPropertySet) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxImageEffectSuiteV1::clipGetPropertySet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipGetImage) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxImageEffectSuiteV1::clipGetImage"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipReleaseImage) as usize - ptr as usize },
        48usize,
        "Offset of field: OfxImageEffectSuiteV1::clipReleaseImage"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipGetRegionOfDefinition) as usize - ptr as usize },
        56usize,
        "Offset of field: OfxImageEffectSuiteV1::clipGetRegionOfDefinition"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort) as usize - ptr as usize },
        64usize,
        "Offset of field: OfxImageEffectSuiteV1::abort"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMemoryAlloc) as usize - ptr as usize },
        72usize,
        "Offset of field: OfxImageEffectSuiteV1::imageMemoryAlloc"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMemoryFree) as usize - ptr as usize },
        80usize,
        "Offset of field: OfxImageEffectSuiteV1::imageMemoryFree"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMemoryLock) as usize - ptr as usize },
        88usize,
        "Offset of field: OfxImageEffectSuiteV1::imageMemoryLock"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMemoryUnlock) as usize - ptr as usize },
        96usize,
        "Offset of field: OfxImageEffectSuiteV1::imageMemoryUnlock"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxImageEffectOpenGLRenderSuiteV1 {
    pub clipLoadTexture: ::std::option::Option<
        unsafe extern "C" fn(
            clip: OfxImageClipHandle,
            time: OfxTime,
            format: *const ::std::os::raw::c_char,
            region: *const OfxRectD,
            textureHandle: *mut OfxPropertySetHandle,
        ) -> OfxStatus,
    >,
    pub clipFreeTexture: ::std::option::Option<
        unsafe extern "C" fn(textureHandle: OfxPropertySetHandle) -> OfxStatus,
    >,
    pub flushResources: ::std::option::Option<unsafe extern "C" fn() -> OfxStatus>,
}
#[test]
fn bindgen_test_layout_OfxImageEffectOpenGLRenderSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxImageEffectOpenGLRenderSuiteV1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxImageEffectOpenGLRenderSuiteV1>(),
        24usize,
        "Size of OfxImageEffectOpenGLRenderSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxImageEffectOpenGLRenderSuiteV1>(),
        8usize,
        "Alignment of OfxImageEffectOpenGLRenderSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipLoadTexture) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxImageEffectOpenGLRenderSuiteV1::clipLoadTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipFreeTexture) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxImageEffectOpenGLRenderSuiteV1::clipFreeTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flushResources) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxImageEffectOpenGLRenderSuiteV1::flushResources"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxOpenCLProgramSuiteV1 {
    pub compileProgram: ::std::option::Option<
        unsafe extern "C" fn(
            pszProgramSource: *const ::std::os::raw::c_char,
            fOptional: ::std::os::raw::c_int,
            pResult: *mut ::std::os::raw::c_void,
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxOpenCLProgramSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxOpenCLProgramSuiteV1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxOpenCLProgramSuiteV1>(),
        8usize,
        "Size of OfxOpenCLProgramSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxOpenCLProgramSuiteV1>(),
        8usize,
        "Alignment of OfxOpenCLProgramSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compileProgram) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxOpenCLProgramSuiteV1::compileProgram"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxProgressSuiteV1 {
    pub progressStart: ::std::option::Option<
        unsafe extern "C" fn(
            effectInstance: *mut ::std::os::raw::c_void,
            label: *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub progressUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            effectInstance: *mut ::std::os::raw::c_void,
            progress: f64,
        ) -> OfxStatus,
    >,
    pub progressEnd: ::std::option::Option<
        unsafe extern "C" fn(effectInstance: *mut ::std::os::raw::c_void) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxProgressSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxProgressSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxProgressSuiteV1>(),
        24usize,
        "Size of OfxProgressSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxProgressSuiteV1>(),
        8usize,
        "Alignment of OfxProgressSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressStart) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxProgressSuiteV1::progressStart"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressUpdate) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxProgressSuiteV1::progressUpdate"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressEnd) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxProgressSuiteV1::progressEnd"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxProgressSuiteV2 {
    pub progressStart: ::std::option::Option<
        unsafe extern "C" fn(
            effectInstance: *mut ::std::os::raw::c_void,
            message: *const ::std::os::raw::c_char,
            messageid: *const ::std::os::raw::c_char,
        ) -> OfxStatus,
    >,
    pub progressUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            effectInstance: *mut ::std::os::raw::c_void,
            progress: f64,
        ) -> OfxStatus,
    >,
    pub progressEnd: ::std::option::Option<
        unsafe extern "C" fn(effectInstance: *mut ::std::os::raw::c_void) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxProgressSuiteV2() {
    const UNINIT: ::std::mem::MaybeUninit<OfxProgressSuiteV2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxProgressSuiteV2>(),
        24usize,
        "Size of OfxProgressSuiteV2"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxProgressSuiteV2>(),
        8usize,
        "Alignment of OfxProgressSuiteV2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressStart) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxProgressSuiteV2::progressStart"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressUpdate) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxProgressSuiteV2::progressUpdate"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressEnd) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxProgressSuiteV2::progressEnd"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxTimeLineSuiteV1 {
    pub getTime: ::std::option::Option<
        unsafe extern "C" fn(instance: *mut ::std::os::raw::c_void, time: *mut f64) -> OfxStatus,
    >,
    pub gotoTime: ::std::option::Option<
        unsafe extern "C" fn(instance: *mut ::std::os::raw::c_void, time: f64) -> OfxStatus,
    >,
    pub getTimeBounds: ::std::option::Option<
        unsafe extern "C" fn(
            instance: *mut ::std::os::raw::c_void,
            firstTime: *mut f64,
            lastTime: *mut f64,
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxTimeLineSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxTimeLineSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxTimeLineSuiteV1>(),
        24usize,
        "Size of OfxTimeLineSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxTimeLineSuiteV1>(),
        8usize,
        "Alignment of OfxTimeLineSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTime) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxTimeLineSuiteV1::getTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gotoTime) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxTimeLineSuiteV1::gotoTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTimeBounds) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxTimeLineSuiteV1::getTimeBounds"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxParametricParameterSuiteV1 {
    pub parametricParamGetValue: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            time: OfxTime,
            parametricPosition: f64,
            returnValue: *mut f64,
        ) -> OfxStatus,
    >,
    pub parametricParamGetNControlPoints: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            time: f64,
            returnValue: *mut ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub parametricParamGetNthControlPoint: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            time: f64,
            nthCtl: ::std::os::raw::c_int,
            key: *mut f64,
            value: *mut f64,
        ) -> OfxStatus,
    >,
    pub parametricParamSetNthControlPoint: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            time: f64,
            nthCtl: ::std::os::raw::c_int,
            key: f64,
            value: f64,
            addAnimationKey: bool,
        ) -> OfxStatus,
    >,
    pub parametricParamAddControlPoint: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            time: f64,
            key: f64,
            value: f64,
            addAnimationKey: bool,
        ) -> OfxStatus,
    >,
    pub parametricParamDeleteControlPoint: ::std::option::Option<
        unsafe extern "C" fn(
            param: OfxParamHandle,
            curveIndex: ::std::os::raw::c_int,
            nthCtl: ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub parametricParamDeleteAllControlPoints: ::std::option::Option<
        unsafe extern "C" fn(param: OfxParamHandle, curveIndex: ::std::os::raw::c_int) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxParametricParameterSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxParametricParameterSuiteV1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxParametricParameterSuiteV1>(),
        56usize,
        "Size of OfxParametricParameterSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxParametricParameterSuiteV1>(),
        8usize,
        "Alignment of OfxParametricParameterSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parametricParamGetValue) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamGetValue"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamGetNControlPoints) as usize - ptr as usize
        },
        8usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamGetNControlPoints"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamGetNthControlPoint) as usize - ptr as usize
        },
        16usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamGetNthControlPoint"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamSetNthControlPoint) as usize - ptr as usize
        },
        24usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamSetNthControlPoint"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamAddControlPoint) as usize - ptr as usize
        },
        32usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamAddControlPoint"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamDeleteControlPoint) as usize - ptr as usize
        },
        40usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamDeleteControlPoint"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parametricParamDeleteAllControlPoints) as usize
                - ptr as usize
        },
        48usize,
        "Offset of field: OfxParametricParameterSuiteV1::parametricParamDeleteAllControlPoints"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxDialogSuiteV1 {
    pub RequestDialog: ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> OfxStatus,
    >,
    pub NotifyRedrawPending: ::std::option::Option<unsafe extern "C" fn() -> OfxStatus>,
}
#[test]
fn bindgen_test_layout_OfxDialogSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxDialogSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxDialogSuiteV1>(),
        16usize,
        "Size of OfxDialogSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxDialogSuiteV1>(),
        8usize,
        "Alignment of OfxDialogSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestDialog) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxDialogSuiteV1::RequestDialog"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NotifyRedrawPending) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxDialogSuiteV1::NotifyRedrawPending"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRGBAColourB {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_OfxRGBAColourB() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBAColourB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBAColourB>(),
        4usize,
        "Size of OfxRGBAColourB"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBAColourB>(),
        1usize,
        "Alignment of OfxRGBAColourB"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBAColourB::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        "Offset of field: OfxRGBAColourB::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        "Offset of field: OfxRGBAColourB::b"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        3usize,
        "Offset of field: OfxRGBAColourB::a"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRGBAColourS {
    pub r: ::std::os::raw::c_ushort,
    pub g: ::std::os::raw::c_ushort,
    pub b: ::std::os::raw::c_ushort,
    pub a: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_OfxRGBAColourS() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBAColourS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBAColourS>(),
        8usize,
        "Size of OfxRGBAColourS"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBAColourS>(),
        2usize,
        "Alignment of OfxRGBAColourS"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBAColourS::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        2usize,
        "Offset of field: OfxRGBAColourS::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRGBAColourS::b"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        6usize,
        "Offset of field: OfxRGBAColourS::a"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRGBAColourF {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_OfxRGBAColourF() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBAColourF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBAColourF>(),
        16usize,
        "Size of OfxRGBAColourF"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBAColourF>(),
        4usize,
        "Alignment of OfxRGBAColourF"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBAColourF::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRGBAColourF::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRGBAColourF::b"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        "Offset of field: OfxRGBAColourF::a"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRGBAColourD {
    pub r: f64,
    pub g: f64,
    pub b: f64,
    pub a: f64,
}
#[test]
fn bindgen_test_layout_OfxRGBAColourD() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBAColourD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBAColourD>(),
        32usize,
        "Size of OfxRGBAColourD"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBAColourD>(),
        8usize,
        "Alignment of OfxRGBAColourD"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBAColourD::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRGBAColourD::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxRGBAColourD::b"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxRGBAColourD::a"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRGBColourB {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_OfxRGBColourB() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBColourB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBColourB>(),
        3usize,
        "Size of OfxRGBColourB"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBColourB>(),
        1usize,
        "Alignment of OfxRGBColourB"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBColourB::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        "Offset of field: OfxRGBColourB::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        "Offset of field: OfxRGBColourB::b"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxRGBColourS {
    pub r: ::std::os::raw::c_ushort,
    pub g: ::std::os::raw::c_ushort,
    pub b: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_OfxRGBColourS() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBColourS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBColourS>(),
        6usize,
        "Size of OfxRGBColourS"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBColourS>(),
        2usize,
        "Alignment of OfxRGBColourS"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBColourS::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        2usize,
        "Offset of field: OfxRGBColourS::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRGBColourS::b"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRGBColourF {
    pub r: f32,
    pub g: f32,
    pub b: f32,
}
#[test]
fn bindgen_test_layout_OfxRGBColourF() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBColourF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBColourF>(),
        12usize,
        "Size of OfxRGBColourF"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBColourF>(),
        4usize,
        "Alignment of OfxRGBColourF"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBColourF::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        "Offset of field: OfxRGBColourF::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRGBColourF::b"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct OfxRGBColourD {
    pub r: f64,
    pub g: f64,
    pub b: f64,
}
#[test]
fn bindgen_test_layout_OfxRGBColourD() {
    const UNINIT: ::std::mem::MaybeUninit<OfxRGBColourD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxRGBColourD>(),
        24usize,
        "Size of OfxRGBColourD"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxRGBColourD>(),
        8usize,
        "Alignment of OfxRGBColourD"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxRGBColourD::r"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxRGBColourD::g"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxRGBColourD::b"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OfxDrawContext {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxDrawContextHandle(pub *mut OfxDrawContext);
pub const OfxStandardColour_kOfxStandardColourOverlayBackground: OfxStandardColour = 0;
pub const OfxStandardColour_kOfxStandardColourOverlayActive: OfxStandardColour = 1;
pub const OfxStandardColour_kOfxStandardColourOverlaySelected: OfxStandardColour = 2;
pub const OfxStandardColour_kOfxStandardColourOverlayDeselected: OfxStandardColour = 3;
pub const OfxStandardColour_kOfxStandardColourOverlayMarqueeFG: OfxStandardColour = 4;
pub const OfxStandardColour_kOfxStandardColourOverlayMarqueeBG: OfxStandardColour = 5;
pub const OfxStandardColour_kOfxStandardColourOverlayText: OfxStandardColour = 6;
pub type OfxStandardColour = ::std::os::raw::c_uint;
pub const OfxDrawLineStipplePattern_kOfxDrawLineStipplePatternSolid: OfxDrawLineStipplePattern = 0;
pub const OfxDrawLineStipplePattern_kOfxDrawLineStipplePatternDot: OfxDrawLineStipplePattern = 1;
pub const OfxDrawLineStipplePattern_kOfxDrawLineStipplePatternDash: OfxDrawLineStipplePattern = 2;
pub const OfxDrawLineStipplePattern_kOfxDrawLineStipplePatternAltDash: OfxDrawLineStipplePattern =
    3;
pub const OfxDrawLineStipplePattern_kOfxDrawLineStipplePatternDotDash: OfxDrawLineStipplePattern =
    4;
pub type OfxDrawLineStipplePattern = ::std::os::raw::c_uint;
pub const OfxDrawPrimitive_kOfxDrawPrimitiveLines: OfxDrawPrimitive = 0;
pub const OfxDrawPrimitive_kOfxDrawPrimitiveLineStrip: OfxDrawPrimitive = 1;
pub const OfxDrawPrimitive_kOfxDrawPrimitiveLineLoop: OfxDrawPrimitive = 2;
pub const OfxDrawPrimitive_kOfxDrawPrimitiveRectangle: OfxDrawPrimitive = 3;
pub const OfxDrawPrimitive_kOfxDrawPrimitivePolygon: OfxDrawPrimitive = 4;
pub const OfxDrawPrimitive_kOfxDrawPrimitiveEllipse: OfxDrawPrimitive = 5;
pub type OfxDrawPrimitive = ::std::os::raw::c_uint;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentLeft: OfxDrawTextAlignment = 1;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentRight: OfxDrawTextAlignment = 2;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentTop: OfxDrawTextAlignment = 4;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentBottom: OfxDrawTextAlignment = 8;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentBaseline: OfxDrawTextAlignment = 16;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentCenterH: OfxDrawTextAlignment = 3;
pub const OfxDrawTextAlignment_kOfxDrawTextAlignmentCenterV: OfxDrawTextAlignment = 20;
pub type OfxDrawTextAlignment = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct OfxDrawSuiteV1 {
    pub getColour: ::std::option::Option<
        unsafe extern "C" fn(
            context: OfxDrawContextHandle,
            std_colour: OfxStandardColour,
            colour: *mut OfxRGBAColourF,
        ) -> OfxStatus,
    >,
    pub setColour: ::std::option::Option<
        unsafe extern "C" fn(
            context: OfxDrawContextHandle,
            colour: *const OfxRGBAColourF,
        ) -> OfxStatus,
    >,
    pub setLineWidth: ::std::option::Option<
        unsafe extern "C" fn(context: OfxDrawContextHandle, width: f32) -> OfxStatus,
    >,
    pub setLineStipple: ::std::option::Option<
        unsafe extern "C" fn(
            context: OfxDrawContextHandle,
            pattern: OfxDrawLineStipplePattern,
        ) -> OfxStatus,
    >,
    pub draw: ::std::option::Option<
        unsafe extern "C" fn(
            context: OfxDrawContextHandle,
            primitive: OfxDrawPrimitive,
            points: *const OfxPointD,
            point_count: ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
    pub drawText: ::std::option::Option<
        unsafe extern "C" fn(
            context: OfxDrawContextHandle,
            text: *const ::std::os::raw::c_char,
            pos: *const OfxPointD,
            alignment: ::std::os::raw::c_int,
        ) -> OfxStatus,
    >,
}
#[test]
fn bindgen_test_layout_OfxDrawSuiteV1() {
    const UNINIT: ::std::mem::MaybeUninit<OfxDrawSuiteV1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OfxDrawSuiteV1>(),
        48usize,
        "Size of OfxDrawSuiteV1"
    );
    assert_eq!(
        ::std::mem::align_of::<OfxDrawSuiteV1>(),
        8usize,
        "Alignment of OfxDrawSuiteV1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getColour) as usize - ptr as usize },
        0usize,
        "Offset of field: OfxDrawSuiteV1::getColour"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setColour) as usize - ptr as usize },
        8usize,
        "Offset of field: OfxDrawSuiteV1::setColour"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setLineWidth) as usize - ptr as usize },
        16usize,
        "Offset of field: OfxDrawSuiteV1::setLineWidth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setLineStipple) as usize - ptr as usize },
        24usize,
        "Offset of field: OfxDrawSuiteV1::setLineStipple"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw) as usize - ptr as usize },
        32usize,
        "Offset of field: OfxDrawSuiteV1::draw"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawText) as usize - ptr as usize },
        40usize,
        "Offset of field: OfxDrawSuiteV1::drawText"
    );
}
